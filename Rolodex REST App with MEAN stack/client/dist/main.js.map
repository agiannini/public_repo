{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/contactinfo/contactinfo.component.css","webpack:///./src/app/contactinfo/contactinfo.component.html","webpack:///./src/app/contactinfo/contactinfo.component.ts","webpack:///./src/app/contacts.service.ts","webpack:///./src/app/data/data.component.css","webpack:///./src/app/data/data.component.html","webpack:///./src/app/data/data.component.ts","webpack:///./src/app/navigation/navigation.component.css","webpack:///./src/app/navigation/navigation.component.html","webpack:///./src/app/navigation/navigation.component.ts","webpack:///./src/app/table/table.component.css","webpack:///./src/app/table/table.component.html","webpack:///./src/app/table/table.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\\r\\n.data_table{\\r\\n  margin:auto;\\r\\n  width: 75vw;\\r\\n}\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvYXBwLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBO0VBQ0UsV0FBVztFQUNYLFdBQVc7QUFDYiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiXHJcbi5kYXRhX3RhYmxle1xyXG4gIG1hcmdpbjphdXRvO1xyXG4gIHdpZHRoOiA3NXZ3O1xyXG59XHJcbiJdfQ== */\"","module.exports = \"<div style=\\\"text-align:center\\\">\\r\\n  <h1>\\r\\n    Welcome to {{ title }}!\\r\\n  </h1>\\r\\n  <app-navigation></app-navigation>\\r\\n  <div class=\\\"bg\\\"></div>\\r\\n\\r\\n  <h5>\\r\\n    <p>\\r\\n      This rolodex application was built in Angular, Mongo, Express, and Node.\\r\\n    </p>\\r\\n    <p>\\r\\n      The client side is built in Angular and accesses my REST API built with Node/Mongo.\\r\\n      The hosting is done by Express.\\r\\n    </p>\\r\\n    <p>\\r\\n      All four CRUD operations are executed through the REST API.\\r\\n    </p>\\r\\n  </h5>\\r\\n  <div class=\\\"data_table\\\">\\r\\n    <router-outlet></router-outlet>\\r\\n\\r\\n  </div>\\r\\n</div>\\r\\n\"","\r\nimport { Component } from '@angular/core';\r\n\r\n\r\n// Purpose:   To be the parent component which is used to load the web app\r\n// Notes:     Calls on two components, app-navigation and app-table.\r\n//            Uses the component decorator\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  title = 'my Rolodex Application';\r\n  constructor() { }\r\n}\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { AppComponent } from './app.component';\r\nimport { NavigationComponent } from './navigation/navigation.component';\r\nimport { TableComponent } from './table/table.component';\r\nimport { DataComponent } from './data/data.component';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { ContactinfoComponent } from './contactinfo/contactinfo.component';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\n// Allows app to reload the page\r\nimport { HashLocationStrategy, LocationStrategy } from '@angular/common';\r\n\r\n\r\n// Used by RouterModule in imports\r\nconst routes: Routes = [\r\n  { path: '', redirectTo: '/table', pathMatch: 'full' },\r\n  { path: 'table', component: TableComponent },\r\n  { path: 'contact/:id', component: ContactinfoComponent }\r\n\r\n]\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    NavigationComponent,\r\n    TableComponent,\r\n    DataComponent,\r\n    ContactinfoComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    HttpClientModule,          // Allows access to the REST API\r\n    FormsModule,\r\n    RouterModule.forRoot(     // Handles routing according to specifications\r\n      routes\r\n    )\r\n  ],\r\n\r\n  // Allows app to reload on the same page\r\n  providers: [{ provide: LocationStrategy, useClass: HashLocationStrategy }],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","module.exports = \".card {\\r\\n  width: 25vw;\\r\\n  margin:auto;\\r\\n}\\r\\n\\r\\nbutton{\\r\\n  width: 100%;\\r\\n}\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29udGFjdGluZm8vY29udGFjdGluZm8uY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLFdBQVc7RUFDWCxXQUFXO0FBQ2I7O0FBRUE7RUFDRSxXQUFXO0FBQ2IiLCJmaWxlIjoic3JjL2FwcC9jb250YWN0aW5mby9jb250YWN0aW5mby5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmNhcmQge1xyXG4gIHdpZHRoOiAyNXZ3O1xyXG4gIG1hcmdpbjphdXRvO1xyXG59XHJcblxyXG5idXR0b257XHJcbiAgd2lkdGg6IDEwMCU7XHJcbn1cclxuIl19 */\"","module.exports = \"<div *ngIf=\\\"!editing\\\">\\r\\n  <div class=\\\"card bg-dark text-light\\\">\\r\\n    <div class=\\\"card-body\\\">\\r\\n      <div class=\\\"card-header\\\">\\r\\n        <button class=\\\"btn btn-outline-secondary mt-2 my-sm-0\\\" (click)=\\\"changeEditing()\\\">Edit</button>\\r\\n      </div>\\r\\n\\r\\n      <h5 class=\\\"card-title\\\">{{contact.name }}</h5>\\r\\n      <p class='card-text'>{{contact.email}}\\r\\n      </p>\\r\\n      <p class='card-text'>{{contact.phone}}\\r\\n      </p>\\r\\n      <p class='card-text'>{{contact.address}}\\r\\n      </p>\\r\\n      <div class=\\\"card-footer \\\"><button class=\\\"btn btn-outline-danger mt-2 my-sm-0\\\" (click)=\\\"deleteThisItem()\\\">Delete</button></div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n\\r\\n<div *ngIf=\\\"editing\\\">\\r\\n  <div class=\\\"card bg-dark text-light\\\">\\r\\n    <div class=\\\"card-body\\\">\\r\\n      <div class=\\\"card-header\\\">\\r\\n        <button class=\\\"btn btn-outline-secondary mt-2 my-sm-0\\\" (click)=\\\"changeEditing()\\\">View</button>\\r\\n      </div>\\r\\n      <form #form=\\\"ngForm\\\" (ngSubmit)=\\\"updateContact(form.value)\\\">\\r\\n        <div class=\\\"form-group\\\">\\r\\n          <label for=\\\"nameField\\\"> Name: </label>\\r\\n          <input #name id=\\\"nameField\\\" name=\\\"nameField\\\" class=\\\"form-control\\\" [ngModel]=\\\"contact.name\\\">\\r\\n          <br />\\r\\n\\r\\n          <label for=\\\"emailField\\\"> Email: </label>\\r\\n          <input #name id=\\\"emailField\\\" name=\\\"emailField\\\" class=\\\"form-control\\\" [ngModel]=\\\"contact.email\\\">\\r\\n          <br />\\r\\n          <label for=\\\"phoneField\\\"> Phone: </label>\\r\\n          <input #name id=\\\"phoneField\\\" name=\\\"phoneField\\\" class=\\\"form-control\\\" [ngModel]=\\\"contact.phone\\\">\\r\\n          <br />\\r\\n\\r\\n          <label for=\\\"addressField\\\"> Address: </label>\\r\\n          <input #name id=\\\"addressField\\\" name=\\\"addressField\\\" class=\\\"form-control\\\" [ngModel]=\\\"contact.address\\\">\\r\\n          <br />\\r\\n\\r\\n        </div>\\r\\n        <div class=\\\"card-footer\\\">\\r\\n\\r\\n          <button class=\\\"btn btn-outline-primary mt-2 my-sm-0\\\" type=\\\"submit\\\">Update</button>\\r\\n\\r\\n        </div>\\r\\n\\r\\n      </form>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { ContactsService } from '.././contacts.service';\r\n\r\n@Component({\r\n  selector: 'app-contactinfo',\r\n  templateUrl: './contactinfo.component.html',\r\n  styleUrls: ['./contactinfo.component.css']\r\n})\r\n\r\n\r\n//  Purpose:  To display the information for the given contact\r\n//  Notes:    Allows the user to toggle between modes and update/delete.\r\nexport class ContactinfoComponent implements OnInit {\r\n  // Editing variable used to switch modes\r\n  editing: boolean = false;\r\n\r\n  // contact declarations prevents name undefined error\r\n  contact: any = {};\r\n  contactID: any;\r\n\r\n  constructor(private route: ActivatedRoute, private contactService: ContactsService) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.getContact();\r\n  }\r\n\r\n  // Purpose:   To retrieve the data for the given contact\r\n  // Notes:     Gets id from url then defines contactID and retrieves contact\r\n  getContact(): void {\r\n    this.contactID = this.route.snapshot.paramMap.get('id');\r\n    this.contactService.getContact(this.contactID)\r\n      .subscribe((contact) => {\r\n        this.contact = contact;\r\n      });\r\n  }\r\n\r\n\r\n  // Purpose:   Toggles editing Mode\r\n  changeEditing(): void {\r\n    if (this.editing === true) {\r\n      this.editing = false;\r\n    }\r\n    else {\r\n      this.editing = true;\r\n    }\r\n  }\r\n\r\n\r\n  // Purpose:   To delete the given item from the database\r\n  // Notes:     Calls on contactService and redirects to index\r\n  deleteThisItem(): void {\r\n    console.log(this.contact);\r\n    this.contactService.deleteContact(this.contactID).subscribe((data) => {\r\n      window.location.href = '/';\r\n    });\r\n  }\r\n\r\n\r\n  // Purpose:   To update the contact using the form data.\r\n  // Notes:     Follows the same procedure described in lecture.\r\n  updateContact(obj: any): void {\r\n    this.contact.name = obj.nameField;\r\n    this.contact.email = obj.emailField;\r\n    this.contact.address = obj.addressField;\r\n    this.contact.phone = obj.phoneField;\r\n    this.contactService.updateContact(this.contact, this.contactID)\r\n      .subscribe((result) => {\r\n        window.location.href = '/';\r\n      })\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from '../environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\n// Purpose:     Service data in between the REST API and the Angular App\r\n// Notes :      Calls on the REST api to perform CRUD functions\r\n//              Calls the enviornment file to load URLs\r\nexport class ContactsService {\r\n  private listURL = environment.listURL;\r\n  private deleteURL = environment.deleteURL;\r\n  constructor(private http:HttpClient) {}\r\n\r\n  getContact(id){\r\n    return this.http.get(this.listURL+id);\r\n  }\r\n  listContacts(){\r\n    return this.http.get(this.listURL);\r\n  }\r\n\r\n  deleteContact(id){\r\n    return this.http.delete(this.deleteURL+id);\r\n  }\r\n  updateContact(data, id){\r\n    console.log(id);\r\n    console.log(data);\r\n    return this.http.put(this.listURL+id, data)\r\n  }\r\n  addContact(data){\r\n    return this.http.post(this.listURL, data)\r\n  }\r\n\r\n}\r\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2RhdGEvZGF0YS5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<a routerLink=\\\"/contact/{{contact._id}}\\\">\\r\\n  <td>{{contact.name}}</td>\\r\\n</a>\\r\\n<td>{{contact.email}}</td>\\r\\n<td>{{contact.phone}}</td>\\r\\n<td>{{contact.address}}</td>\\r\\n\"","import { Component, OnInit, Input } from '@angular/core';\r\nimport { ContactsService } from '.././contacts.service';\r\n\r\n@Component({\r\n  selector: '[app-data]',             // Brackets allows selector inside tag\r\n  templateUrl: './data.component.html',\r\n  styleUrls: ['./data.component.css']\r\n})\r\n\r\n\r\n// Purpose:   To display data from the database within the data table\r\n// Notes:     Imports contact from parent component/\r\nexport class DataComponent implements OnInit {\r\n  @Input() contact;\r\n  constructor(private contactsService: ContactsService) { }\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL25hdmlnYXRpb24vbmF2aWdhdGlvbi5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<nav class=\\\"navbar navbar-dark bg-dark \\\">\\r\\n  <a class=\\\"navbar-brand\\\" href=\\\"#\\\">Home</a>\\r\\n\\r\\n  <ul class=\\\"navbar-nav\\\">\\r\\n    <li class=\\\"nav-item active\\\">\\r\\n\\r\\n\\r\\n      <form #newContactForm=\\\"ngForm\\\" (ngSubmit)=\\\"newContact()\\\" class=\\\"form-inline my-2 my-lg-0\\\">\\r\\n        <input #name required minlength=\\\"1\\\" class=\\\"form-control mr-sm-2\\\" name=\\\"name\\\" placeholder=\\\"name\\\" [(ngModel)]=\\\"contact.name\\\">\\r\\n        <input #email required minlength=\\\"1\\\" class=\\\"form-control mr-sm-2\\\" name=\\\"email\\\" placeholder=\\\"email\\\" [(ngModel)]=\\\"contact.email\\\">\\r\\n        <input #phone required minlength=\\\"1\\\" class=\\\"form-control mr-sm-2\\\" name=\\\"phone\\\" placeholder=\\\"phone\\\" [(ngModel)]=\\\"contact.phone\\\">\\r\\n        <input #address required minlength=\\\"1\\\" class=\\\"form-control mr-sm-2\\\" name=\\\"address\\\" placeholder=\\\"address\\\" [(ngModel)]=\\\"contact.address\\\">\\r\\n        <button class=\\\"btn btn-outline-success my-2 my-sm-0\\\" [disabled]=\\\"!newContactForm.valid\\\">Add</button>\\r\\n      </form>\\r\\n    </li>\\r\\n\\r\\n\\r\\n  </ul>\\r\\n</nav>\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { ContactsService } from '.././contacts.service';\r\n\r\n@Component({\r\n  selector: 'app-navigation',\r\n  templateUrl: './navigation.component.html',\r\n  styleUrls: ['./navigation.component.css']\r\n})\r\n\r\n// Purpose:   To provide navigation and a form to add to the database\r\n// Notes:     uses two way binding to populate object\r\nexport class NavigationComponent implements OnInit {\r\n\r\n  contact: any = {};\r\n  constructor(private contactService: ContactsService) { }\r\n\r\n  // After a new contact is added, the app loads the home page\r\n  newContact(): void {\r\n    console.log(this.contact);\r\n    this.contactService.addContact(this.contact)\r\n      .subscribe((response) => {\r\n        window.location.href = '/';\r\n        console.log(response);\r\n      });\r\n  }\r\n\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3RhYmxlL3RhYmxlLmNvbXBvbmVudC5jc3MifQ== */\"","module.exports = \"<table class=\\\"table table-dark\\\">\\r\\n  <thead>\\r\\n    <td scope='col'>Name</td>\\r\\n    <td scope='col'>Email</td>\\r\\n    <td scope='col'>Phone</td>\\r\\n    <td scope='col'>Address</td>\\r\\n    <td scope='col'></td>\\r\\n  </thead>\\r\\n  <tr *ngFor='let contact of contactData' app-data [contact]=\\\"contact\\\">\\r\\n\\r\\n  </tr>\\r\\n</table>\\r\\n\"","\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { ContactsService } from '.././contacts.service';\r\n\r\n// Decorator for TableComponent class\r\n@Component({\r\n  selector: 'app-table',\r\n  templateUrl: './table.component.html',\r\n  styleUrls: ['./table.component.css'],\r\n  providers: [ContactsService]\r\n})\r\n// Purpose:   To set up the table and retreive all the data from the REST api\r\n// Notes:     To display table properly, app-data is inside <tr> tag. To do This\r\n//            selector in app-data.ts is in brackets\r\nexport class TableComponent implements OnInit {\r\n  contactData = null;\r\n  constructor(private contactsService: ContactsService) { }\r\n\r\n  // The contactsService uses an observable to retrieve the data\r\n  ngOnInit() {\r\n    this.contactsService.listContacts().subscribe((data) => {\r\n      this.contactData = data;\r\n    });\r\n  }\r\n\r\n}\r\n","// This file contains the enviornment variables for the application\r\nexport const environment = {\r\n  production: false,\r\n  listURL: 'http://206.189.77.154:2000/myapi/contacts/',\r\n  deleteURL: \"http://206.189.77.154:2000/myapi/contacts/delete/\"\r\n};\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"],"sourceRoot":""}